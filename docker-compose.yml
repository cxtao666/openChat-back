version: '3'
services:
  meeting:
    image: meeting #镜像
    container_name: meeting-app #容器名称  
    build:
      context: .
      dockerfile: ./build/meeting-app.Dockerfile
    environment:
      NODE_ENV: 'production'
    ports:
      - '3000:3000'
    networks:
      - common-network
  meeting-chat:
    image: meeting-chat #镜像
    container_name: meeting-chat #容器名称  
    build:
      context: .
      dockerfile: ./build/meeting-chat.Dockerfile
    ports:
      - '5001:5001'
    environment:
      NODE_ENV: 'production'
    networks:
      - common-network
  nest-service:
    image: nest-service #镜像
    container_name: nest-service #容器名称  
    build:
      context: .
      dockerfile: ./build/nest-service.Dockerfile
    environment:
      NODE_ENV: 'production'
    networks:
      - common-network
  rabbitmq:
    image: rabbitmq:3.9.13-management
    # 容器名
    container_name: rabbitmq
    # 是否支持重启
    restart: always
    hostname: rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    # 容器卷
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    networks:
      - common-network
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: always
    networks:
      - common-network
  docker-etcd:
    hostname: etcd
    image: bitnami/etcd:3.5.5
    volumes:
      - "./data/etcd/data:/bitnami/etcd/data"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
    ports:
      - "2379:2379"
      - "2380:2380"
    networks:
      - common-network
  redis-master:
    image: 'redis:7'
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=""
    networks:
      - common-network
    ports:
      - '6379:6379'
  redis-slave1:
    image: 'redis:7'
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis
      - REDIS_MASTER_PASSWORD=""
      - REDIS_PASSWORD=""
    ports:
      - '6381:6379'
    depends_on:
      - redis-master
    networks:
      - common-network
  redis-slave2:
    image: 'redis:7'
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis
      - REDIS_MASTER_PASSWORD=""
      - REDIS_PASSWORD=""
    ports:
      - '6382:6379'
    depends_on:
      - redis-master
    networks:
      - common-network
  redis-sentinel:
    build:
      context: ./build/sentinel
      dockerfile: ./redis-sentinel.Dockerfile
    environment:
      - REDIS_MASTER_PASSWORD=""
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    ports:
      - '26379:26379'
    networks:
      - common-network
  kong-db:
    image: postgres:13-alpine
    restart: always  #每次总是启动
    networks: 
      - common-network
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
  kong:
    image: kong:latest
    container_name: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000" #
      - "8001:8001" # 
    networks:
      - common-network
    depends_on:
      - kong-db
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./data/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - common-network
  grafana:
    image: grafana/grafana
    ports:
      - "6030:3000"
    container_name: grafana
    depends_on:
      - prometheus
    networks:
      - common-network
  consul:
    image: consul:1.15.4
    container_name: consul
    ports:
      - "8500:8500"        # HTTP API 和 Web UI
      - "8600:8600/udp"    # DNS 解析
    command: agent -dev -client=0.0.0.0
    volumes:
      - ./data/consul:/consul/data
    networks:
      - common-network
networks:
  common-network:
    external: true
